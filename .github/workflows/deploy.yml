# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Deploy
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/master' && 'production' || 'preview' }}
    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Setup Zig
        uses: mlugg/setup-zig@v2
      - name: Install cargo-lambda
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-lambda
      - name: Install sqlx-cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: sqlx-cli
      - name: Install cargo-make
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-make
      - name: Install bevy_cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: bevy_cli
          git: https://github.com/TheBevyFlock/bevy_cli

      - uses: actions/cache@v4
        name: Cache Cargo dependencies
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-deps-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions/cache@v4
        name: Cache Rust build artifacts
        with:
          path: |
            target/
            widgets/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('server/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('server/Cargo.toml') }}
            ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Bundle lambda and widgets
        env:
          SQLX_OFFLINE: true
          VITE_GOTCHA_SV_ORIGIN: ${{ vars.GOTCHA_SV_ORIGIN }}
        run: cargo make bundle

      - name: Run Migrations
        env:
          DATABASE_URL: postgresql://${{ secrets.SUPABASE_USER }}:${{ secrets.SUPABASE_PASSWORD }}@${{ secrets.SUPABASE_HOST }}:${{ secrets.SUPABASE_PORT }}/${{ secrets.SUPABASE_DB_NAME }}
        run: sqlx migrate run

      - name: Deploy lambda Function
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cargo lambda deploy --binary-name gotcha-server gotcha-server-${{ vars.ENV_TAG }} \
            --include config/ \
            --tag environment=${{ vars.ENV_TAG }} \
            --env-var APP_ENVIRONMENT=production \
            --env-var AWS_LAMBDA_HTTP_IGNORE_STAGE_IN_PATH=true \
            --env-var RUST_LOG=${{ vars.LOG_LEVEL }} \
            --env-var AWS_LAMBDA_LOG_FORMAT=json \
            --env-var APP_DATABASE__HOST=${{ secrets.SUPABASE_HOST }} \
            --env-var APP_DATABASE__USERNAME=${{ secrets.SUPABASE_USER }} \
            --env-var APP_DATABASE__PASSWORD=${{ secrets.SUPABASE_PASSWORD }} \
            --env-var APP_DATABASE__DATABASE_NAME=${{ secrets.SUPABASE_DB_NAME }} \
            --env-var APP_DATABASE__PORT=${{ secrets.SUPABASE_PORT }} \

      - name: Deploy CDK stack
        working-directory: ./infra/gotcha-server
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          npm ci
          stage=${{ vars.ENV_TAG }}
          stage=$(tr '[:lower:]' '[:upper:]' <<< ${stage:0:1})${stage:1}
          npm run cdk deploy $(echo $stage)/GotchaServerStack -- --require-approval never
