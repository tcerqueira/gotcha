[config]
default_to_workspace = false

[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
RUST_LOG = "info,gotcha_server=debug,client=debug"

###################
# Main Tasks
###################

[tasks.default]
alias = "build"

[tasks.build]
description = "Build server and widgets"
dependencies = ["server-build", "widget-api-build", "bundle-widgets"]

[tasks.dev]
description = "Build server and widgets"
run_task = { name = [
    "watch-server",
    "watch-client",
    "watch-widget_api",
    "bundle-widgets",
], fork = true, parallel = true }

[tasks.bundle]
description = "Bundle for deployment"
run_task = { name = [
    "server-bundle",
    "widget-api-build",
    "bundle-widgets",
], fork = true, parallel = true }

###################
# Server Tasks
###################

[tasks.server-build]
description = "Build server"
command = "cargo"
args = ["build", "${@}"]

[tasks.watch-server]
description = "Watch and run the server"
command = "cargo"
args = ["run", "-q", "-p", "gotcha-server"]
watch = { ignore_pattern = "server/examples/*", watch = ["./server"] }

[tasks.watch-client]
description = "Watch and run the client"
command = "cargo"
args = ["run", "-q", "--example", "client"]
watch = { watch = ["./server/examples"] }

[tasks.server-bundle]
description = "Bundle server for aws lambda"
command = "cargo"
args = ["lambda", "build", "--release", "--arm64", "--features", "aws-lambda"]

###################
# Widget Tasks
###################

[tasks.widget-api-build]
description = "Build npm-based widgets"
cwd = "./widget-api"
script_runner = "@shell"
script = ["npm install --prefer-offline", "npm run build"]

[tasks.watch-widget_api]
description = "Watch and bundle widget-api"
cwd = "./widget-api"
command = "npm"
args = ["run", "build"]
watch = { watch = ["./widget-api"] }

[tasks.bundle-cup_stack]
description = "Bundle cup-stack to /dist"
cwd = "./widgets"
script = [
    "bevy build --yes --bin=cup-stack --profile=wasm-release web --bundle",
    "cp -R target/bevy_web/wasm-release/cup-stack ../dist",
]

[tasks.bundle-widgets]
description = "Bundle npm-based widgets"
dependencies = [
    "bundle-cup_stack",
    "bundle-im_not_a_robot",
    "bundle-constellation",
]

[tasks.bundle-im_not_a_robot]
description = "Bundle im-not-a-robot widget"
cwd = "./widgets/im-not-a-robot"
script_runner = "@shell"
script = ["npm install --prefer-offline", "npm run build"]

[tasks.bundle-constellation]
description = "Bundle constellation widget"
cwd = "./widgets/constellation"
script_runner = "@shell"
script = ["npm install --prefer-offline", "npm run build"]

###################
# Database Tasks
###################

[tasks.db-up]
description = "Start the database using Docker Compose"
command = "docker-compose"
args = ["up", "-d"]

[tasks.db-stop]
description = "Stop the database"
command = "docker-compose"
args = ["stop"]

[tasks.db-down]
description = "Stop and remove the database containers"
command = "docker-compose"
args = ["down"]

[tasks.db-migrate]
description = "Run database migrations"
command = "cargo"
args = ["sqlx", "migrate", "run"]

[tasks.db-prepare]
description = "Run database migrations"
command = "cargo"
args = [
    "sqlx",
    "prepare",
    "--workspace",
    "--",
    "--all-targets",
    "--all-features",
]
